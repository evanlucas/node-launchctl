{"name":"Node-launchctl","tagline":"Native bindings to launchctl commands for node","body":"# node-launchctl\r\n\r\nNative bindings for `launchctl` commands for [node.js](http://nodejs.org)\r\n\r\n  - [LaunchCTL.listSync()](#launchctllistsyncnamestring)\r\n  - [LaunchCTL.list()](#launchctllistnamestringcbfunction)\r\n  - [LaunchCTL.startSync()](#launchctlstartsynclabelstring)\r\n  - [LaunchCTL.start()](#launchctlstartlabelstringcbfunction)\r\n  - [LaunchCTL.stopSync()](#launchctlstopsynclabelstring)\r\n  - [LaunchCTL.stop()](#launchctlstoplabelstringcbfunction)\r\n  - [LaunchCTL.removeSync()](#launchctlremovesynclabelstring)\r\n  - [LaunchCTL.remove()](#launchctlremovelabelstringcbfunction)\r\n  - [LaunchCTL.loadSync()](#launchctlloadsyncpathstringoptsobject)\r\n  - [LaunchCTL.load()](#launchctlloadpathstringoptsobjectcbfunction)\r\n  - [LaunchCTL.unloadSync()](#launchctlunloadsyncpathstringoptsobject)\r\n  - [LaunchCTL.unload()](#launchctlunloadpathstringoptsobjectcbfunction)\r\n  - [LaunchCTL.submitSync()](#launchctlsubmitsyncargsobject)\r\n  - [LaunchCTL.submit()](#launchctlsubmitdataobjectcbfunction)\r\n  - [LaunchCTL.managername()](#launchctlmanagername)\r\n  - [LaunchCTL.manageruid()](#launchctlmanageruid)\r\n  - [LaunchCTL.managerpid()](#launchctlmanagerpid)\r\n  - [LaunchCTL.limit()](#launchctllimitlimtypestringsoftstringnumberhardstringnumber)\r\n  - [LaunchCTL.setEnvVar()](#launchctlsetenvvarkeystringvalstring)\r\n  - [LaunchCTL.unsetEnvVar()](#launchctlunsetenvvarkeystring)\r\n  - [LaunchCTL.getEnvVar()](#launchctlgetenvvarkeystring)\r\n  - [LaunchCTL.getRUsage()](#launchctlgetrusagewhostring)\r\n  - [LaunchCTL.umask()](#launchctlumaskargstring)\r\n  - [LaunchCTL.Plist](#launchctlplist)\r\n\r\n## LaunchCTL.listSync(name:String)\r\n\r\n  `launchctl list`\r\n  \r\n  Examples:\r\n  \r\n### List All\r\n  \r\n```js\r\n   try {\r\n     var res = ctl.listSync()\r\n   }\r\n   catch (e) {\r\n     throw e\r\n   }\r\n```\r\n\r\n  \r\n### List specific job\r\n  \r\n```js\r\n   try {\r\n     var res = ctl.listSync('com.apple.Dock.agent')\r\n   }\r\n   catch (e) {\r\n     throw e\r\n   }\r\n```\r\n\r\n  \r\n### List by regular expression\r\n  \r\n```js\r\n   try {\r\n     var res = ctl.listSync(/com.apple.(.*)/)\r\n   }\r\n   catch (e) {\r\n     throw e\r\n   }\r\n```\r\n\r\n## LaunchCTL.list(name:String, cb:Function)\r\n\r\n  `launchctl list`\r\n  \r\n  \r\n  Examples:\r\n  \r\n### List all\r\n  \r\n```js\r\n   ctl.list(function(err, jobs) {\r\n     if (err) throw err\r\n     console.log(jobs)\r\n   })\r\n```\r\n\r\n  \r\n### List specific job\r\n  \r\n```js\r\n   ctl.list('com.apple.Dock.agent', function(err, job) {\r\n     if (err) throw err\r\n     console.log(job)\r\n   })\r\n```\r\n\r\n  \r\n### List by regex\r\n  \r\n```js\r\n   ctl.list(/com.apple.(.*)/, function(err, jobs) {\r\n     if (err) throw err\r\n     console.log(jobs)\r\n   })\r\n```\r\n\r\n## LaunchCTL.startSync(label:String)\r\n\r\n  Start job with the given label\r\n  `launchctl start`\r\n  \r\n  Examples:\r\n  \r\n```js\r\n   try {\r\n     ctl.startSync('com.apple.Dock.agent')\r\n   }\r\n   catch (e) {\r\n     throw e\r\n   }\r\n```\r\n\r\n## LaunchCTL.start(label:String, cb:Function)\r\n\r\n  Start job with the given label\r\n  `launchctl start`\r\n  \r\n  Examples:\r\n  \r\n```js\r\n   ctl.start('com.apple.Dock.agent', function(err) {\r\n     if (err) throw err\r\n     // Your code\r\n   })\r\n```\r\n\r\n## LaunchCTL.stopSync(label:String)\r\n\r\n  Stop job with the given label\r\n  `launchctl stop`\r\n  \r\n  Examples:\r\n  \r\n```js\r\n   try {\r\n     var res = ctl.stopSync('com.apple.Dock.agent')\r\n   }\r\n   catch (e) {\r\n     throw e\r\n   }\r\n```\r\n\r\n  \r\n  **Note:**\r\n  Keep in mind what launchd actually does on a job that has the `KeepAlive`\r\n  set to true.  It will simply restart the job, not actually stop it\r\n\r\n## LaunchCTL.stop(label:String, cb:Function)\r\n\r\n  Stop job with the given label\r\n  `launchctl stop`\r\n  \r\n  Examples:\r\n  \r\n```js\r\n   ctl.stop('com.apple.Dock.agent', function(err) {\r\n     if (err) throw err\r\n     // Your code\r\n   })\r\n```\r\n\r\n  \r\n  \r\n  **Note:**\r\n  Keep in mind what launchd actually does on a job that has the `KeepAlive`\r\n  set to true.  It will simply restart the job, not actually stop it\r\n\r\n## LaunchCTL.removeSync(label:String)\r\n\r\n  Removes a job with the given label from launchd\r\n  Equivalent to `launchctl remove`\r\n  \r\n  Examples:\r\n  \r\n```js\r\n   try {\r\n     ctl.removeSync('com.jobname.test')\r\n   }\r\n   catch (e) {\r\n     throw e\r\n   }\r\n```\r\n\r\n## LaunchCTL.remove(label:String, cb:Function)\r\n\r\n  Removes a job with the given label from launchd\r\n  Equivalent to `launchctl remove`\r\n  \r\n  Examples:\r\n  \r\n```js\r\n   ctl.remove('com.jobname.test', function(err) {\r\n     if (err) throw err\r\n     // Your code\r\n   })\r\n```\r\n\r\n## LaunchCTL.loadSync(path:String, opts:Object)\r\n\r\n  Loads a job\r\n  `launchctl load`\r\n  \r\n  Examples:\r\n  \r\n```js\r\n   try {\r\n     ctl.loadSync('/System/Library/...', {\r\n       editondisk: false, // default\r\n       forceload: false, // default\r\n       session_type: 'Aqua',\r\n       domain: 'user'\r\n     })\r\n   catch (e) {\r\n     throw e\r\n   }\r\n```\r\n\r\n## LaunchCTL.load(path:String, opts:Object, cb:Function)\r\n\r\n  Loads a job\r\n  \r\n  Examples:\r\n  \r\n```js\r\n   ctl.load('/System/Library/...', {\r\n     editondisk: false,\r\n     forceload: false,\r\n     session_type: 'Aqua',\r\n     domain: 'user'\r\n   }, function(err) {\r\n     if (err) throw err\r\n     // Your code\r\n   })\r\n```\r\n\r\n## LaunchCTL.unloadSync(path:String, opts:Object)\r\n\r\n  Unload job at given path\r\n  \r\n  Examples:\r\n  \r\n```js\r\n   try {\r\n     ctl.unloadSync('/System/Library/...', {\r\n       editondisk: false,\r\n       forceload: false,\r\n       session_type: 'Aqua',\r\n       domain: 'user'\r\n     })\r\n   }\r\n   catch (e) {\r\n     throw e\r\n   }\r\n```\r\n\r\n## LaunchCTL.unload(path:String, opts:Object, cb:Function)\r\n\r\n  Unloads a job\r\n  \r\n  Examples:\r\n  \r\n```js\r\n   ctl.unload('/System/Library/..', {\r\n     editondisk: false,\r\n     forceload: false,\r\n     session_type: 'Aqua',\r\n     domain: 'user'\r\n   }, function(err) {\r\n     if (err) throw err\r\n     // Your code\r\n   })\r\n```\r\n\r\n## LaunchCTL.submitSync(args:Object)\r\n\r\n  Submit a job\r\n  \r\n  Examples:\r\n  \r\n```js\r\n   try {\r\n     ctl.submitSync({\r\n         label: 'com.test.label'\r\n       , program: '/bin/ls'\r\n       , stderr: '/var/log/test.err.log'\r\n       , stdout: '/var/log/test.out.log'\r\n       , args: ['-l', '-a', '-h']\r\n     })\r\n   }\r\n   catch(e) {\r\n     throw e\r\n   }\r\n```\r\n\r\n## LaunchCTL.submit(data:Object, cb:Function)\r\n\r\n  Submit a job\r\n  \r\n  Examples:\r\n  \r\n```js\r\n   ctl.submit({\r\n       label: 'com.test.label'\r\n     , program: '/bin/ls'\r\n     , stderr: '/var/log/test.err.log'\r\n     , stdout: '/var/log/test.out.log'\r\n     , args: ['-l', '-a', '-h']\r\n   }, function(err) {\r\n     if (err) {\r\n       console.log(err)\r\n     } else {\r\n       console.log('Success')\r\n     }\r\n   })\r\n```\r\n\r\n## LaunchCTL.managername()\r\n\r\n  Gets the name of the current manager (session)\r\n  `launchctl managername`\r\n  \r\n  Examples:\r\n  \r\n```js\r\n   var name = ctl.managername()\r\n   // => 'Aqua'\r\n```\r\n\r\n## LaunchCTL.manageruid()\r\n\r\n  Gets the uid of the current manager\r\n  `launchctl manageruid`\r\n  \r\n  Examples:\r\n  \r\n```js\r\n   var uid = ctl.manageruid()\r\n   // => 501\r\n```\r\n\r\n## LaunchCTL.managerpid()\r\n\r\n  Gets the pid of the current manager\r\n  `launchctl managerpid`\r\n  \r\n  Examples:\r\n  \r\n```js\r\n   var pid = ctl.managerpid()\r\n   // => 263\r\n```\r\n\r\n## LaunchCTL.limit(limtype:String, soft:String|Number, hard:String|Number)\r\n\r\n  Gets/sets the launchd resource limits\r\n  \r\n  Examples:\r\n  \r\n```js\r\n   var limits = ctl.limit()\r\n   // => {\r\n   // =>   cpu: { soft: 'unlimited', hard: 'unlimited' },\r\n   // =>   filesize: { soft: 'unlimited', hard: 'unlimited' },\r\n   // =>   data: { soft: 'unlimited', hard: 'unlimited' },\r\n   // =>   stack: { soft: '8388608', hard: '67104768' },\r\n   // =>   core: { soft: '0', hard: 'unlimited' },\r\n   // =>   rss: { soft: 'unlimited', hard: 'unlimited' },\r\n   // =>   memlock: { soft: 'unlimited', hard: 'unlimited' },\r\n   // =>   maxproc: { soft: '1000', hard: '2000' },\r\n   // =>   maxfiles: { soft: '8192', hard: '20480' }\r\n   // => }\r\n```\r\n\r\n  \r\n  \r\n### Get `maxproc`\r\n  \r\n```js\r\n   var res = ctl.limit('maxproc')\r\n   // => { soft: '1000', hard: '2000' }\r\n```\r\n\r\n  \r\n### Set `maxproc` limit\r\n  \r\n```js\r\n   var res = ctl.limit('maxproc', '1200', '2000')\r\n   // => 0\r\n```\r\n\r\n## LaunchCTL.setEnvVar(key:String, val:String)\r\n\r\n  Sets a launchd environment variable\r\n\r\n## LaunchCTL.unsetEnvVar(key:String)\r\n\r\n  Unsets a launchd environment variable\r\n\r\n## LaunchCTL.getEnvVar(key:String)\r\n\r\n  Gets an Environment Variable (or all of them)\r\n  \r\n  If no `key` is passed, it will return an Object\r\n  If `key` is passed, if the key exists, it will return a string\r\n  If `key` is passed, but does not exist, it will return false\r\n\r\n## LaunchCTL.getRUsage(who:String)\r\n\r\n  Gets rusage for either `self` or `children`\r\n\r\n## LaunchCTL.umask(arg:String)\r\n\r\n  Gets or sets the `umask`\r\n  \r\n  Example:\r\n  \r\n```js\r\n  var res = ctl.umask('22')\r\n```\r\n\r\n  \r\n```js\r\n  var res = ctl.umask()\r\n```\r\n\r\n## LaunchCTL.Plist\r\n\r\n  Construct launchctl plist object\r\n\r\n```js\r\n  var plist = new ctl.Plist()\r\n```\r\n\r\n***\r\n\r\n# Plist\r\n\r\nMakes writing launchd configuration plists a little easier\r\n\r\n  - [Plist()](#plist)\r\n  - [Plist.addBoolean()](#plistaddbooleankstringvboolean)\r\n  - [Plist.addString()](#plistaddstringkstringvstringmandarray)\r\n  - [Plist.addArray()](#plistaddarraykstringvarraystringnumberobject)\r\n  - [Plist.addNumber()](#plistaddnumberkstringvnumber)\r\n  - [Plist.addObject()](#plistaddobjectkstringvobject)\r\n  - [Plist.setDisabled()](#plistsetdisableddisabledboolean)\r\n  - [Plist.setEnableGlobbing()](#plistsetenableglobbingglobbingboolean)\r\n  - [Plist.setEnableTransactions()](#plistsetenabletransactionstransactionsboolean)\r\n  - [Plist.setOnDemand()](#plistsetondemandondemandboolean)\r\n  - [Plist.setRunAtLoad()](#plistsetrunatloadrunatloadboolean)\r\n  - [Plist.setInitGroups()](#plistsetinitgroupsgroupsboolean)\r\n  - [Plist.setInetdCompatibilityWait()](#plistsetinetdcompatibilitywaitwaitboolean)\r\n  - [Plist.setStartOnMount()](#plistsetstartonmountsboolean)\r\n  - [Plist.setDebug()](#plistsetdebugdboolean)\r\n  - [Plist.setWaitForDebugger()](#plistsetwaitfordebuggerdboolean)\r\n  - [Plist.setAbandonProcessGroup()](#plistsetabandonprocessgroupdboolean)\r\n  - [Plist.setLowPriorityIO()](#plistsetlowpriorityiodboolean)\r\n  - [Plist.setLaunchOnlyOnce()](#plistsetlaunchonlyoncedboolean)\r\n  - [Plist.setLabel()](#plistsetlabellabelstring)\r\n  - [Plist.setProgram()](#plistsetprogramprogramstring)\r\n  - [Plist.setUserName()](#plistsetusernameusernamestring)\r\n  - [Plist.setGroupName()](#plistsetgroupnamegroupnamestring)\r\n  - [Plist.setLimitLoadToSessionType()](#plistsetlimitloadtosessiontypesessiontypestring)\r\n  - [Plist.setStdErrPath()](#plistsetstderrpathpstring)\r\n  - [Plist.setStdOutPath()](#plistsetstdoutpathpstring)\r\n  - [Plist.setStdInPath()](#plistsetstdinpathsstring)\r\n  - [Plist.setRootDir()](#plistsetrootdirdirstring)\r\n  - [Plist.setWorkingDir()](#plistsetworkingdirdirstring)\r\n  - [Plist.setProcessType()](#plistsetprocesstypesstring)\r\n  - [Plist.setUmask()](#plistsetumaskumasknumber)\r\n  - [Plist.setTimeOut()](#plistsettimeouttonumber)\r\n  - [Plist.setExitTimeOut()](#plistsetexittimeouttonumber)\r\n  - [Plist.setThrottleInterval()](#plistsetthrottleintervalthrottlenumber)\r\n  - [Plist.setStartInterval()](#plistsetstartintervalinumber)\r\n  - [Plist.setNice()](#plistsetniceinumber)\r\n  - [Plist.setProgramArgs()](#plistsetprogramargsargsarraystringnumberobject)\r\n  - [Plist.setLimitLoadToHosts()](#plistsetlimitloadtohostshostsarraystringnumber)\r\n  - [Plist.setLimitLoadFromHosts()](#plistsetlimitloadfromhostshostsarraystringnumber)\r\n  - [Plist.setWatchPaths()](#plistsetwatchpathsparraystringnumberobject)\r\n  - [Plist.setQueueDirectories()](#plistsetqueuedirectoriesdarraystringnumberobject)\r\n  - [Plist.setEnvVar()](#plistsetenvvarobjobject)\r\n  - [Plist.setSoftResourceLimits()](#plistsetsoftresourcelimits)\r\n  - [Plist.setHardResourceLimits()](#plistsethardresourcelimits)\r\n  - [Plist.setKeepAlive()](#plistsetkeepalivekeepalivebooleanstringnumberobject)\r\n  - [Plist.addMachService()](#plistaddmachservice)\r\n  - [Plist.addSocket()](#plistaddsocket)\r\n  - [Plist.deleteStartCalendarInterval()](#plistdeletestartcalendarinterval)\r\n  - [Plist.addCalendarInterval()](#plistaddcalendarintervaloobject)\r\n  - [Plist.build()](#plistbuildobjobject)\r\n  - [Plist.reset()](#plistreset)\r\n\r\n## Plist()\r\n\r\n  Constructor\r\n\r\n## Plist.addBoolean(k:String, v:Boolean)\r\n\r\n  Adds a boolean to the plist object for the given `k`\r\n\r\n## Plist.addString(k:String, v:String, mand:Array)\r\n\r\n  Adds a string to the plist object for the given `k`\r\n  \r\n  If `mand` is not an array, then no restrictions are placed\r\n\r\n## Plist.addArray(k:String, v:Array|String|Number|Object)\r\n\r\n  Adds an array to the plist object for the given `k`\r\n  \r\n  NOTE: **Any value that is not an array will be wrapped in an array**\r\n\r\n## Plist.addNumber(k:String, v:Number)\r\n\r\n  Adds a number to the plist object for the given `k`\r\n\r\n## Plist.addObject(k:String, v:Object)\r\n\r\n  Adds an object to the plist object for the given `k`\r\n\r\n## Plist.setDisabled(disabled:Boolean)\r\n\r\n  Sets the `Disabled` bool\r\n\r\n## Plist.setEnableGlobbing(globbing:Boolean)\r\n\r\n  Sets the `EnableGlobbing` bool\r\n\r\n## Plist.setEnableTransactions(transactions:Boolean)\r\n\r\n  Sets the `EnableTransactions` bool\r\n\r\n## Plist.setOnDemand(ondemand:Boolean)\r\n\r\n  Sets the `OnDemand` bool\r\n\r\n## Plist.setRunAtLoad(runatload:Boolean)\r\n\r\n  Sets the `RunAtLoad` bool\r\n\r\n## Plist.setInitGroups(groups:Boolean)\r\n\r\n  Sets the `InitGroups` bool\r\n\r\n## Plist.setInetdCompatibilityWait(wait:Boolean)\r\n\r\n  Sets the `inetdCompatibility.Wait` bool\r\n\r\n## Plist.setStartOnMount(s:Boolean)\r\n\r\n  Sets the `StartOnMount` bool\r\n\r\n## Plist.setDebug(d:Boolean)\r\n\r\n  Sets the `Debug` bool\r\n\r\n## Plist.setWaitForDebugger(d:Boolean)\r\n\r\n  Sets the `WaitForDebugger` bool\r\n\r\n## Plist.setAbandonProcessGroup(d:Boolean)\r\n\r\n  Sets the `AbandonProcessGroup` bool\r\n\r\n## Plist.setLowPriorityIO(d:Boolean)\r\n\r\n  Sets the `LowPriorityIO` bool\r\n\r\n## Plist.setLaunchOnlyOnce(d:Boolean)\r\n\r\n  Sets the `LaunchOnlyOnce` bool\r\n\r\n## Plist.setLabel(label:String)\r\n\r\n  Sets the `Label` field\r\n\r\n## Plist.setProgram(program:String)\r\n\r\n  Sets the `Program` string\r\n\r\n## Plist.setUserName(username:String)\r\n\r\n  Sets the `UserName` string\r\n\r\n## Plist.setGroupName(groupname:String)\r\n\r\n  Sets the `GroupName` string\r\n\r\n## Plist.setLimitLoadToSessionType(sessiontype:String)\r\n\r\n  Sets the `LimitLoadToSessionType` string\r\n\r\n## Plist.setStdErrPath(p:String)\r\n\r\n  Sets the `StandardErrorPath` string\r\n\r\n## Plist.setStdOutPath(p:String)\r\n\r\n  Sets the `StandardOutPath` string\r\n\r\n## Plist.setStdInPath(s:String)\r\n\r\n  Sets the `StandardInPath` string\r\n\r\n## Plist.setRootDir(dir:String)\r\n\r\n  Sets the `RootDirectory` string\r\n\r\n## Plist.setWorkingDir(dir:String)\r\n\r\n  Sets the `WorkingDirectory` string\r\n\r\n## Plist.setProcessType(s:String)\r\n\r\n  Sets the `ProcessType` string\r\n\r\n## Plist.setUmask(umask:Number)\r\n\r\n  Sets the `Umask` number\r\n\r\n## Plist.setTimeOut(to:Number)\r\n\r\n  Sets the `TimeOut` number\r\n\r\n## Plist.setExitTimeOut(to:Number)\r\n\r\n  Sets the `ExitTimeOut` number\r\n\r\n## Plist.setThrottleInterval(throttle:Number)\r\n\r\n  Sets the `ThrottleInterval` number\r\n\r\n## Plist.setStartInterval(i:Number)\r\n\r\n  Sets the `StartInterval` number\r\n\r\n## Plist.setNice(i:Number)\r\n\r\n  Sets the `Nice` number\r\n\r\n## Plist.setProgramArgs(args:Array|String|Number|Object)\r\n\r\n  Sets the `ProgramArguments` array\r\n\r\n## Plist.setLimitLoadToHosts(hosts:Array|String|Number)\r\n\r\n  Sets the `LimitLoadToHosts` array\r\n\r\n## Plist.setLimitLoadFromHosts(hosts:Array|String|Number)\r\n\r\n  Sets the `LimitLoadFromHosts` array\r\n\r\n## Plist.setWatchPaths(p:Array|String|Number|Object)\r\n\r\n  Sets the `WatchPaths` array\r\n\r\n## Plist.setQueueDirectories(d:Array|String|Number|Object)\r\n\r\n  Sets the `QueueDirectories` array\r\n\r\n## Plist.setEnvVar(obj:Object)\r\n\r\n  Sets the `EnvironmentVariables` object\r\n\r\n## Plist.setSoftResourceLimits()\r\n\r\n  Sets the `SoftResourceLimits` object\r\n  \r\n  **WARNING: Not yet implemented**\r\n\r\n## Plist.setHardResourceLimits()\r\n\r\n  Sets the `HardResourceLimits` object\r\n  \r\n  **WARNING: Not yet implemented**\r\n\r\n## Plist.setKeepAlive(keepalive:Boolean|String|Number|Object)\r\n\r\n  Sets the `KeepAlive` value\r\n\r\n## Plist.addMachService()\r\n\r\n  Adds an object to the `MachServices` key\r\n  \r\n  **WARNING: Not yet implemented**\r\n\r\n## Plist.addSocket()\r\n\r\n  Adds an object to the `Sockets` key\r\n  \r\n  **WARNING: Not yet implemented**\r\n\r\n## Plist.deleteStartCalendarInterval()\r\n\r\n  Removes the `StartCalendarInterval` object/array\r\n\r\n## Plist.addCalendarInterval(o:Object)\r\n\r\n  Adds a Dictionary for the `StartCalendarInterval`\r\n\r\n## Plist.build()\r\n\r\n  Builds the actual plist object into a string\r\n\r\n## Plist.reset()\r\n\r\n  Wipes the slate clean\r\n","google":"UA-45089130-1","note":"Don't delete this file! It's used internally to help with page regeneration."}